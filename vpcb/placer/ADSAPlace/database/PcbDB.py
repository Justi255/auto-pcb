# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PcbDB
else:
    import _PcbDB

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class kicadPcbDataBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fileName: "std::string"):
        _PcbDB.kicadPcbDataBase_swiginit(self, _PcbDB.new_kicadPcbDataBase(fileName))
    __swig_destroy__ = _PcbDB.delete_kicadPcbDataBase

    def printLayer(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printLayer(self)

    def printNet(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printNet(self)

    def printInst(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printInst(self)

    def printComp(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printComp(self)

    def printNetclass(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printNetclass(self)

    def printPcbRouterInfo(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printPcbRouterInfo(self)

    def printFile(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printFile(self)

    def printSegment(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printSegment(self)

    def printUnconnectedPins(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printUnconnectedPins(self)

    def printKiCad(self, *args) -> "void":
        return _PcbDB.kicadPcbDataBase_printKiCad(self, *args)

    def printNodes(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printNodes(self)

    def printLockedInst(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printLockedInst(self)

    def printDesignStatistics(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printDesignStatistics(self)

    def printRoutedSegmentsWLAndNumVias(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printRoutedSegmentsWLAndNumVias(self)

    def buildKicadPcb(self) -> "bool":
        return _PcbDB.kicadPcbDataBase_buildKicadPcb(self)

    def removeRoutedSegmentsAndVias(self) -> "void":
        return _PcbDB.kicadPcbDataBase_removeRoutedSegmentsAndVias(self)

    def getPcbRouterInfo(self, arg2: "std::vector< std::set< std::pair< double,double > > > *") -> "bool":
        return _PcbDB.kicadPcbDataBase_getPcbRouterInfo(self, arg2)

    def getPinShapeRelativeCoordsToModule(self, pad: "padstack const &", inst: "instance const &", coords: "points_2d const &", coordsRe: "points_2d *") -> "void":
        return _PcbDB.kicadPcbDataBase_getPinShapeRelativeCoordsToModule(self, pad, inst, coords, coordsRe)

    def getPinPosition(self, *args) -> "bool":
        return _PcbDB.kicadPcbDataBase_getPinPosition(self, *args)

    def getCompBBox(self, compId: "int const", bBox: "point_2d *") -> "bool":
        return _PcbDB.kicadPcbDataBase_getCompBBox(self, compId, bBox)

    def getPinLayer(self, instId: "int const &", padStackId: "int const &") -> "std::vector< int >":
        return _PcbDB.kicadPcbDataBase_getPinLayer(self, instId, padStackId)

    def getPadstackRotatedWidthAndHeight(self, inst: "instance const &", pad: "padstack const &", width: "double &", height: "double &") -> "void":
        return _PcbDB.kicadPcbDataBase_getPadstackRotatedWidthAndHeight(self, inst, pad, width, height)

    def getComponent(self, *args) -> "component &":
        return _PcbDB.kicadPcbDataBase_getComponent(self, *args)

    def getInstance(self, *args) -> "instance &":
        return _PcbDB.kicadPcbDataBase_getInstance(self, *args)

    def getNet(self, *args) -> "net &":
        return _PcbDB.kicadPcbDataBase_getNet(self, *args)

    def getNetclass(self, id: "int const") -> "netclass &":
        return _PcbDB.kicadPcbDataBase_getNetclass(self, id)

    def getFileName(self) -> "std::string":
        return _PcbDB.kicadPcbDataBase_getFileName(self)

    def getInstances(self) -> "std::vector< instance > &":
        return _PcbDB.kicadPcbDataBase_getInstances(self)

    def getComponents(self) -> "std::vector< component > &":
        return _PcbDB.kicadPcbDataBase_getComponents(self)

    def getNets(self) -> "std::vector< net > &":
        return _PcbDB.kicadPcbDataBase_getNets(self)

    def getUnconnectedPins(self) -> "std::vector< Pin > &":
        return _PcbDB.kicadPcbDataBase_getUnconnectedPins(self)

    def getNetclasses(self) -> "std::vector< netclass > &":
        return _PcbDB.kicadPcbDataBase_getNetclasses(self)

    def isInstanceId(self, id: "int const") -> "bool":
        return _PcbDB.kicadPcbDataBase_isInstanceId(self, id)

    def isComponentId(self, id: "int const") -> "bool":
        return _PcbDB.kicadPcbDataBase_isComponentId(self, id)

    def isNetId(self, id: "int const") -> "bool":
        return _PcbDB.kicadPcbDataBase_isNetId(self, id)

    def isNetclassId(self, id: "int const") -> "bool":
        return _PcbDB.kicadPcbDataBase_isNetclassId(self, id)

    def getNumCopperLayers(self) -> "int":
        return _PcbDB.kicadPcbDataBase_getNumCopperLayers(self)

    def getLayerId(self, layerName: "std::string const &") -> "int":
        return _PcbDB.kicadPcbDataBase_getLayerId(self, layerName)

    def getLayerName(self, layerId: "int const") -> "std::string":
        return _PcbDB.kicadPcbDataBase_getLayerName(self, layerId)

    def getCopperLayers(self) -> "std::map< int,std::string > &":
        return _PcbDB.kicadPcbDataBase_getCopperLayers(self)

    def isCopperLayer(self, *args) -> "bool":
        return _PcbDB.kicadPcbDataBase_isCopperLayer(self, *args)

    def getBoardBoundaryByPinLocation(self, minX: "double &", maxX: "double &", minY: "double &", maxY: "double &") -> "void":
        return _PcbDB.kicadPcbDataBase_getBoardBoundaryByPinLocation(self, minX, maxX, minY, maxY)

    def addClearanceDrc(self, obj1: "Object &", obj2: "Object &") -> "void":
        return _PcbDB.kicadPcbDataBase_addClearanceDrc(self, obj1, obj2)

    def getBoardBoundaryByEdgeCuts(self, minX: "double &", maxX: "double &", minY: "double &", maxY: "double &") -> "void":
        return _PcbDB.kicadPcbDataBase_getBoardBoundaryByEdgeCuts(self, minX, maxX, minY, maxY)

    def printClearanceDrc(self) -> "void":
        return _PcbDB.kicadPcbDataBase_printClearanceDrc(self)

    def getInstancesCount(self) -> "int":
        return _PcbDB.kicadPcbDataBase_getInstancesCount(self)

    def getNumNets(self) -> "int":
        return _PcbDB.kicadPcbDataBase_getNumNets(self)

    def getLargestClearance(self) -> "double":
        return _PcbDB.kicadPcbDataBase_getLargestClearance(self)

    def testInstAngle(self) -> "void":
        return _PcbDB.kicadPcbDataBase_testInstAngle(self)

# Register kicadPcbDataBase in _PcbDB:
_PcbDB.kicadPcbDataBase_swigregister(kicadPcbDataBase)



